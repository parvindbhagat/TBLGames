<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Lobby: <%= game.clientName %></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <style>
      body {
        margin: 0;
        padding: 0;
        height: 100vh;
        color: white;
        /* padding-top: 60px; Adjust for navbar height */
        background-image: url("/images/facHome.jpg");
        /* image path */
        background-size: cover;
        /* Ensures the image covers the entire background */
        background-position: center;
        /* Centers the image */
        background-repeat: no-repeat;
        /* Prevents the image from repeating */
        background-attachment: fixed;
        /* Keeps
       the background fixed during scroll */
      }
    </style>
</head>
<body class="vh-100">
    <div class="logo d-flex justify-content-end">
        <img src="/images/Logo.png" alt="Chrysalis Logo" class="me-5" style="max-height: 80px; margin-top: 20px; margin-bottom: 20px;">
    </div>
    <div class="container d-flex justify-content-center align-items-center mt-5">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h1 class="h4 mb-0">Game Lobby: <%= game.clientName %></h1>
                <p class="mb-0 small">Intervention: <%= game.interventionName || 'N/A' %> | Batch: <%= game.batchId || 'N/A' %></p>
            </div>
            <div class="card-body p-4">
                <h5 class="card-title">Waiting for Teams to Join</h5>
                <p>Share this link with the participants:</p>
                <div class="input-group mb-3">
                    <input type="text" id="joinUrl" class="form-control" value="<%= joinUrl %>" readonly>
                    <button class="btn btn-outline-secondary" type="button" id="copyButton" title="Copy to clipboard">
                        <i class="bi bi-clipboard"></i>
                    </button>
                </div>

                <hr>

                <h6>Teams (<span id="teamsJoined">0</span>/<%= game.numberOfTeams %>):</h6>
                <ul id="teamList" class="list-group mb-4">
                    <!-- Teams will be dynamically added here -->
                    <li class="list-group-item text-muted">No teams have joined yet.</li>
                </ul>

                <div class="d-grid">
                    <button id="startGameBtn" class="btn btn-success btn-lg" disabled>Waiting for teams...</button>
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const gameId = "<%= game.gameId %>";

        const teamList = document.getElementById('teamList');
        const teamsJoinedSpan = document.getElementById('teamsJoined');
        const startGameBtn = document.getElementById('startGameBtn');
        const copyButton = document.getElementById('copyButton');
        const joinUrlInput = document.getElementById('joinUrl');

        // 1. Facilitator joins the game room
        socket.emit('facilitatorJoin', gameId);

        // 2. Listen for game state updates from the server
        socket.on('updateGameState', (game) => {
            teamsJoinedSpan.textContent = game.teams.length;
            
            teamList.innerHTML = ''; // Clear the list

            if (game.teams.length === 0) {
                teamList.innerHTML = '<li class="list-group-item text-muted">No teams have joined yet.</li>';
            } else {
                game.teams.forEach(team => {
                    const li = document.createElement('li');
                    li.className = 'list-group-item d-flex justify-content-between align-items-center';                    

                    // Use innerHTML to easily construct the content with the button
                    const statusBadge = team.isReady
                        ? `<span class="badge rounded-pill bg-success">Ready</span>`
                        : `<span class="badge rounded-pill bg-warning text-dark">Not Ready</span>`;

                    // Only show the kick button if the game is in the 'lobby' state
                    const kickButton = game.status === 'lobby'
                        ? `<button class="btn btn-sm btn-outline-danger kick-btn ms-2" data-team-name="${team.name}" title="Kick ${team.name}">
                               <i class="bi bi-x-circle"></i>
                           </button>`
                        : '';

                    // Note: Using textContent for team.name to prevent any potential XSS issues.
                    const teamNameSpan = document.createElement('span');
                    teamNameSpan.textContent = team.name;

                    const controlsDiv = document.createElement('div');
                    controlsDiv.innerHTML = statusBadge + kickButton;

                    li.appendChild(teamNameSpan);
                    li.appendChild(controlsDiv);
                    teamList.appendChild(li);

                    // Sanitize team.name before using it in a selector if it contains special characters
                    const sanitizedTeamName = team.name.replace(/[^a-zA-Z0-9-_]/g, '-');
                    li.id = `team-${sanitizedTeamName}`;
                });
            }

            // 3. Check if the game can be started
            const allReady = game.teams.every(team => team.isReady);
            if (game.teams.length === game.numberOfTeams && allReady) {
                startGameBtn.disabled = false;
                startGameBtn.textContent = 'Start Game!';
            } else {
                startGameBtn.disabled = true;
                startGameBtn.textContent = 'Waiting for all teams to be ready...';
            }
        });

        // Add a single event listener to the list for handling kick button clicks
        teamList.addEventListener('click', (event) => {
            const kickButton = event.target.closest('.kick-btn');
            if (kickButton) {
                const teamName = kickButton.dataset.teamName;
                if (confirm(`Are you sure you want to kick the team "${teamName}"?`)) {
                    socket.emit('kickTeam', { gameId, teamName });
                }
            }
        });

        // 4. Handle Start Game button click
        startGameBtn.addEventListener('click', () => {
            socket.emit('startGame', gameId);
            startGameBtn.disabled = true;
            startGameBtn.textContent = 'Starting...';
            // You can redirect to the game screen upon receiving a 'gameStarted' or 'newQuestion' event
            // For example: window.location.href = `/facilitator/game/${gameId}`;
        });

                // 5. Listen for the server to confirm the game has started
        socket.on('gameStarted', (data) => {
            // Redirect the facilitator to their game control panel
            window.location.href = `/facilitator/game/${data.gameId}`;
        });

        // 6. Copy to clipboard functionality
        copyButton.addEventListener('click', () => {
            joinUrlInput.select();
            navigator.clipboard.writeText(joinUrlInput.value).then(() => {
                copyButton.innerHTML = '<i class="bi bi-clipboard-check-fill"></i>';
                setTimeout(() => {
                    copyButton.innerHTML = '<i class="bi bi-clipboard"></i>';
                }, 2000);
            });
        });
    </script>
</body>
</html>
